{% import _self as menus %}

{#
  Recursive macro to render the full menu tree.
  @see http://twig.sensiolabs.org/doc/tags/macro.html
#}
{{ menus.menu_links(items, attributes, 0) }}

{% macro menu_links(items, attributes, menu_level) %}
  {% import _self as menus %}
  {% if items %}
    {% if menu_level == 0 %}
      <ul{{ attributes.addClass('nav navbar-nav')|without('id') }}>
    {% else %}
      <ul class="dropdown-menu">
    {% endif %}
    {% for item in items %}
      {%
        set classes = [
          menu_level ? 'dropdown-item' : 'nav-item',
          item.is_expanded ? 'menu-item--expanded',
          item.is_collapsed ? 'menu-item--collapsed',
          item.in_active_trail ? 'active',
          item.below ? 'dropdown',
        ]
      %}
      <li{{ item.attributes.addClass(classes) }}>
        {%
          set link_classes = [
            not menu_level ? 'nav-link',
            item.in_active_trail ? 'active',
            item.below ? 'dropdown-toggle',
            item.url.getOption('attributes').class ? item.url.getOption('attributes').class | join(' '),
            'nav-link-' ~ item.url.toString() | clean_class,
          ]
        %}
        {% if item.below %}
          {# Add `data-bs-toggle` only for mobile devices via a CSS class #}
          {{ link(item.title, item.url, {
            'class': link_classes|merge(['mobile-toggle']), 
            'aria-expanded': 'false', 
            'aria-haspopup': 'true'
          }) }}
          {{ menus.menu_links(item.below, attributes, menu_level + 1) }}
        {% else %}
          {{ link(item.title, item.url, {'class': link_classes}) }}
        {% endif %}
      </li>
    {% endfor %}
    </ul>
  {% endif %}
{% endmacro %}


<script>
document.addEventListener('DOMContentLoaded', function () {
  const mobileToggles = document.querySelectorAll('.mobile-toggle');

  function updateToggleAttributes() {
    mobileToggles.forEach(toggle => {
      if (window.innerWidth < 992) {
        toggle.setAttribute('data-bs-toggle', 'dropdown');
      } else {
        toggle.removeAttribute('data-bs-toggle');
      }
    });
  }

  // Initialize and handle window resizing
  updateToggleAttributes();
  window.addEventListener('resize', updateToggleAttributes);
});
const dropdownLinks = document.querySelectorAll(".dropdown-toggle");

dropdownLinks.forEach(link => {
    link.addEventListener('click', (event) => {
        console.log("clicked nav");
        // Get the URL from the href attribute
        const url = link.getAttribute("href");
        if (url) {
            event.preventDefault(); // Prevent the default dropdown behavior
            window.location.href = url; // Redirect to the URL
        } else {
            console.warn("No href attribute found on link:", link);
        }
    });
});
</script>


<style>
@media (min-width: 992px) {
  .dropdown:hover > .dropdown-menu {
    display: block;
  }
}
</style>